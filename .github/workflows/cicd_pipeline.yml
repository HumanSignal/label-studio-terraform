name: "Validation"

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request_target:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.pull_request.head.ref || github.ref_name }}
  cancel-in-progress: true

env:
  TFSEC_VERSION: "v1.28.1"
  TFLINT_VERSION: "v0.42.2"

jobs:

  tfsec:
    strategy:
      matrix:
        provider: [ aws ]
    runs-on: ubuntu-latest
    steps:
      - uses: hmarr/debug-action@v2.1.0

      - name: Configure tfsec binary cache
        id: tfsec-cache
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/tfsec
          key: tfsec-${{ env.TFSEC_VERSION }}

      - name: Install tfsec
        if: steps.tfsec-cache.outputs.cache-hit != 'true'
        run: |
          download_path=$(mktemp -d -t tfsec.XXXXXXXXXX)
          download_executable="${download_path}/tfsec"
          wget -O "${download_executable}" \
            "https://github.com/aquasecurity/tfsec/releases/download/${{ env.TFSEC_VERSION }}/tfsec-linux-amd64"
          install "${download_executable}" "/usr/local/bin/tfsec"

      - name: Check tfsec version
        run: tfsec -v

      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after }}

      - name: TF Sec
        id: tfsec
        run: |
          result_file="$(mktemp -d)/tfsec_results.txt"
          echo "result_file=${result_file}" >> $GITHUB_OUTPUT
          tfsec --out="${result_file}"  .

      - name: Upload TF Sec results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: TF Sec results
          path: ${{ steps.tfsec.outputs.result_file }}


  tflint:
    strategy:
      matrix:
        provider: [ aws ]
    runs-on: ubuntu-latest
    steps:
      - uses: hmarr/debug-action@v2.1.0

      - name: Configure tflint binary cache
        id: tflint-cache
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/tflint
          key: tflint-${{ env.TFLINT_VERSION }}

      - name: Install tflint
        if: steps.tflint-cache.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail ${ACTIONS_STEP_DEBUG:+-x}
          download_path=$(mktemp -d -t tflint.XXXXXXXXXX)
          download_zip="${download_path}/tflint.zip"
          download_executable="${download_path}/tflint"
          wget -O "${download_zip}" \
            "https://github.com/terraform-linters/tflint/releases/download/${{ env.TFLINT_VERSION }}/tflint_linux_amd64.zip"
          unzip -u "${download_zip}" -d "${download_path}"
          install "${download_executable}" "/usr/local/bin/tflint"

      - name: Check tflint version
        run: tflint -v

      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after }}

      - name: TF Lint
        id: tflint
        run: |
          set -euo pipefail ${ACTIONS_STEP_DEBUG:+-x}
          result_file="$(mktemp -d)/tflint_results.txt"
          echo "result_file=${result_file}" >> $GITHUB_OUTPUT
          cd "terraform/${{ matrix.provider }}/env"
          tflint | tee -a "${result_file}"

      - name: Upload TF Lint results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: TF Lint results
          path: ${{ steps.tflint.outputs.result_file }}
